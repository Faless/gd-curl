#!python

from misc.utility.scons_hints import *

import os


def validate_godotcpp_dir(key, val, env):
    normalized = val if os.path.isabs(val) else os.path.join(env.Dir("#").abspath, val)
    if not os.path.isdir(normalized):
        raise UserError("GDExtension directory ('%s') does not exist: %s" % (key, val))


if "ios_min_version" not in ARGUMENTS:
    ARGUMENTS["ios_min_version"] = "11.0"
if "macos_deployment_target" not in ARGUMENTS:
    ARGUMENTS["macos_deployment_target"] = "11.0"

env = Environment()
opts = Variables(["customs.py"], ARGUMENTS)
opts.Add(BoolVariable("compat", help="Enable pre-HTTPClientExtension compatibility mode", default=True))
opts.Add(
    PathVariable(
        "godot_cpp",
        "Path to the directory containing Godot CPP folder",
        None,
        validate_godotcpp_dir,
    )
)
opts.Add(
    EnumVariable(
        "tls_library",
        "The TLS library to use ('openssl' or 'mbedTLS')",
        "openssl",
        ["openssl", "mbedtls"],
    )
)
opts.Update(env)

sconstruct = env.get("godot_cpp", "godot-cpp") + "/SConstruct"
cpp_env = SConscript(sconstruct)
env = cpp_env.Clone()
opts.Update(env)

result_path = os.path.join("bin", "addons", "gdcurl")

# Our includes and sources
env.Append(CPPDEFINES=["CURL_STATICLIB"])
env.Append(CPPPATH=["src/"])
sources = Glob("src/*.cpp") + Glob("src/http_client2/*.cpp")

if env["compat"]:
    sources += Glob("src/compat/*.cpp")
    print([s.abspath for s in sources])
    env.Append(CPPDEFINES=["HTTP_CLIENT_EXTENSION_COMPAT"])

# Add our build tools
for tool in ["openssl", "cmake", "mbedtls", "libzlib", "nghttp2", "curl"]:
    env.Tool(tool, toolpath=["tools"])

use_openssl = env.get("tls_library", "") == "openssl"
use_mbedtls = env.get("tls_library", "") == "mbedtls"
if use_openssl:
    ssl = env.OpenSSL()
elif use_mbedtls:
    ssl = env.BuildMbedTLS()
else:
    print("Invalid 'tls_library': " + env.get("tls_library", ""))
    Exit(255)

zlib = env.BuildZlib()
nghttp2 = env.BuildNGHTTP2()

curl = env.BuildCURL(ssl, zlib, nghttp2)

# Forces building our sources after OpenSSL and cURL.
# This is because OpenSSL headers are generated by their build system and SCons doesn't know about them.
# Note: This might not be necessary in this specific case since our sources doesn't include OpenSSL headers directly,
# but it's better to be safe in case of indirect inclusions by one of our other dependencies.
env.Depends(sources, ssl + zlib + curl + nghttp2)

# We want to statically link against libstdc++ on Linux to maximize compatibility, but we must restrict the exported
# symbols using a GCC version script, or we might end up overriding symbols from other libraries.
# Using "-fvisibility=hidden" will not work, since libstdc++ explicitly exports its symbols.
symbols_file = None
if env["platform"] == "linux" or (
    env["platform"] == "windows" and env.get("use_mingw", False) and not env.get("use_llvm", False)
):
    symbols_file = env.File("misc/gcc/symbols-extension.map")
    env.Append(
        LINKFLAGS=[
            "-Wl,--no-undefined,--version-script=" + symbols_file.abspath,
            "-static-libgcc",
            "-static-libstdc++",
        ]
    )
    env.Depends(sources, symbols_file)

# Make the shared library
result_name = "libgdcurl{}{}".format(env["suffix"], env["SHLIBSUFFIX"])
library = env.SharedLibrary(target=os.path.join(result_path, "lib", result_name), source=sources)

Default(library)

# GDNativeLibrary
extfile = env.Substfile(
    os.path.join(result_path, "gdcurl.gdextension"),
    "misc/gdcurl.gdextension",
    SUBST_DICT={"{GODOT_VERSION}": "4.3"},
)

Default(extfile)
